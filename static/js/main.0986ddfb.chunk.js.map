{"version":3,"sources":["QuoteMachine.js","App.js","serviceWorker.js","index.js"],"names":["quotes","randomNum","Math","floor","random","length","randomAuthor","author","randomQuote","quote","QuoteMachine","props","state","getRandomQuote","bind","this","setState","id","href","target","rel","class","onClick","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oQAEIA,EAAS,CACT,CACI,MAAS,8EACT,OAAU,eAEd,CACI,MAAS,qEACT,OAAU,iBAEd,CACI,MAAS,yDACT,OAAU,mBAEd,CACI,MAAS,kHACT,OAAU,gBAEd,CACI,MAAS,mEACT,OAAU,wBAEd,CACI,MAAS,kDACT,OAAU,kBAIdC,EAAYC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAOK,QAC9CC,EAAeN,EAAOC,GAAWM,OACjCC,EAAcR,EAAOC,GAAWQ,MA+CrBC,E,YA5CX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,MAAQ,CACTH,MAAOD,EACPD,OAAQD,GAEZ,EAAKO,eAAiB,EAAKA,eAAeC,KAApB,gBAPP,E,8EAWf,IAAIb,EAAYC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAOK,QAC9CC,EAAeN,EAAOC,GAAWM,OACjCC,EAAcR,EAAOC,GAAWQ,MAEpCM,KAAKC,SAAS,CACVP,MAAOD,EACPD,OAAQD,M,+BAKZ,OACI,6BACI,yBAAKW,GAAG,aACJ,yBAAKA,GAAG,QACJ,+BAAKF,KAAKH,MAAMH,MAAhB,MAEJ,yBAAKQ,GAAG,UACJ,gCAAMF,KAAKH,MAAML,SAErB,uBAAGU,GAAG,cAAcC,KAAK,yCAAyCC,OAAO,SAASC,IAAI,uBAClF,4BAAQH,GAAG,mBAAkB,uBAAGI,MAAM,qBAE1C,4BAAQC,QAASP,KAAKF,eAAgBI,GAAG,aAAzC,cAEJ,yBAAKI,MAAM,UACP,uBAAGJ,GAAG,UAAN,wB,GAtCOM,aCrBZC,MARf,WACE,OACE,yBAAKC,UAAU,MAAMR,GAAG,aACpB,kBAAC,EAAD,QCKYS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.0986ddfb.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nlet quotes = [\r\n    {\r\n        \"quote\": \"Life isn’t about getting and having, it’s about giving and being.\",\r\n        \"author\": \"Kevin Kruse\"\r\n    },\r\n    {\r\n        \"quote\": \"Whatever the mind of man can conceive and believe, it can achieve.\",\r\n        \"author\": \"Napoleon Hill\"\r\n    },\r\n    {\r\n        \"quote\": \"Strive not to be a success, but rather to be of value.\",\r\n        \"author\": \"Albert Einstein\"\r\n    },\r\n    {\r\n        \"quote\": \"Two roads diverged in a wood, and I—I took the one less traveled by, And that has made all the difference.\",\r\n        \"author\": \"Robert Frost\"\r\n    },\r\n    {\r\n        \"quote\": \"I attribute my success to this: I never gave or took any excuse.\",\r\n        \"author\": \"Florence Nightingale\"\r\n    },\r\n    {\r\n        \"quote\": \"You miss 100% of the shots you don’t take.\",\r\n        \"author\": \"Wayne Gretzky\"\r\n    }\r\n];\r\n\r\nlet randomNum = Math.floor(Math.random() * quotes.length);\r\nlet randomAuthor = quotes[randomNum].author;\r\nlet randomQuote = quotes[randomNum].quote;\r\n\r\nclass QuoteMachine extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            quote: randomQuote,\r\n            author: randomAuthor\r\n        };\r\n        this.getRandomQuote = this.getRandomQuote.bind(this);\r\n    }\r\n\r\n    getRandomQuote() {\r\n        let randomNum = Math.floor(Math.random() * quotes.length);\r\n        let randomAuthor = quotes[randomNum].author;\r\n        let randomQuote = quotes[randomNum].quote;\r\n\r\n        this.setState({\r\n            quote: randomQuote,\r\n            author: randomAuthor\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div id=\"quote-box\">\r\n                    <div id='text'>\r\n                        <p>\"{this.state.quote}\"</p>\r\n                    </div>\r\n                    <div id=\"author\">\r\n                        <p>- {this.state.author}</p>\r\n                    </div>\r\n                    <a id=\"tweet-quote\" href=\"https://twitter.com/intent/tweet?text=\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        <button id=\"tweet-quote-btn\"><i class=\"fab fa-twitter\"></i></button>\r\n                    </a>\r\n                    <button onClick={this.getRandomQuote} id=\"new-quote\">New Quote</button>\r\n                </div>\r\n                <div class=\"footer\">\r\n                    <p id=\"footer\">by Ryan Albert</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default QuoteMachine;","import React from 'react';\nimport './App.css';\nimport QuoteMachine from './QuoteMachine';\n\nfunction App() {\n  return (\n    <div className=\"App\" id=\"container\">\n        <QuoteMachine />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}